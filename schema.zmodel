generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.pdf"
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/zenstack-hooks"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

abstract model BaseModel {
  id        String   @id @default(ulid()) @allow('read', true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User extends BaseModel {
  email    String   @unique
  password String   @password @omit
  name     String?
  role     Role     @default(USER)
  devices  Device[]
  
  ownedDashboards  Dashboard[] @relation("OwnedDashboards")
  sharedDashboards Dashboard[] @relation("SharedDashboards")

  @@allow('create,read', true)
  @@allow('update,delete', auth().role == 'ADMIN')
}

enum Role {
  ADMIN
  USER
}

enum TopicSuffix {
  STATUS_ONOFF
  STATUS_BRIGHTNESS
  STATUS_COLOR
  STATUS_TEMPERATURE
  STATUS_HUMIDITY
  COMMAND_ONOFF
  COMMAND_BRIGHTNESS
  COMMAND_COLOR
  COMMAND_TEMPERATURE
}

model DeviceType extends BaseModel {
  name          String        @unique
  devices       Device[]
  topicSuffixes TopicSuffix[]

  @@allow('all', true)
}

enum DeviceStatus {
  ONLINE
  OFFLINE
  UNKNOWN
}

model Device extends BaseModel {
  name         String
  description  String?
  status       DeviceStatus @default(UNKNOWN)
  metadata     Json?
  deviceType   DeviceType   @relation(fields: [deviceTypeId], references: [id])
  deviceTypeId String
  userId       String?
  user         User?        @relation(fields: [userId], references: [id])
  locationId   String?
  location     Location?    @relation(fields: [locationId], references: [id])

  baseTopic    String       @unique
  telemetry    Telemetry[]
  alerts       Alert[]
  
  dashboards   DashboardDevice[]

  @@allow('all', true)
}

model Location extends BaseModel {
  name    String
  address String?
  devices Device[]

  @@allow('all', true)
}

model Telemetry extends BaseModel {
  receivedAt  DateTime    @default(now())
  data        Json
  topicSuffix TopicSuffix

  device      Device      @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId    String

  @@index([deviceId, topicSuffix, receivedAt])
  @@allow('all', true)
}

model Alert extends BaseModel {
  deviceId String
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  severity String
  message  String
}

enum WidgetSize {
  SMALL
  MEDIUM
  LARGE
}

type DashboardDeviceLayout {
  width WidgetSize
  height WidgetSize
  order Int @default(0)
}

model Dashboard extends BaseModel {
  name        String
  description String?
  isPublic    Boolean      @default(false)
  
  owner       User         @relation(fields: [ownerId], references: [id], name: "OwnedDashboards")
  ownerId     String
  
  sharedWith  User[]       @relation(name: "SharedDashboards")
  
  devices     DashboardDevice[]

  @@allow('create', auth() != null)
  @@allow('read', isPublic == true || owner == auth() || sharedWith?[auth()])
  @@allow('update,delete', owner == auth())
}

model DashboardDevice extends BaseModel {
  dashboard     Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  dashboardId   String
  device        Device    @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  deviceId      String
  
  layout        DashboardDeviceLayout @json
  
  @@unique([dashboardId, deviceId])
  @@allow('read', dashboard.isPublic == true)
  @@allow('all', dashboard.owner == auth() || dashboard.sharedWith?[auth()])
}
